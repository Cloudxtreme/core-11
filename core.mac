|***
	core.mac
	Core Macro
	exspes007
	
	"Somoene once told me it taks a lot of skill and preperation to be effectively lazy."
	-- unknown
	
	Required Plugins:	
	- MQ2Cast
	- MQ2EQBC
	- EQBCS2
	- MQ2Exchange
	- MQ2MoveUtils
	- MQ2Netbots
	- MQ2Debuffs
	
		
	Files:
	- core.mac									You are looking at it
	- core.ini									Script settings that affect all the toons and environment, fishing and foraging results.
	- common.inc								All common use functions.
	- events.inc								Contains responses to EQ generated changes (environment).
	- hud.inc										Sets the hud.
	- declare.inc								99.9% of all variables, class INI creations, forced event, watched commands, alias'.
	- test.inc									empty. testing purposes.
	- class.???.inc							One include for each class [WIZ|NEC|MAG|ENC|WAR|PAL|SHD|BST|BER|BAR|RNG|ROG|CLR|DRU|SHM]
	- info.inc									/info text response.
	- misc stuff.txt						Just helpful info. old code. a forgotten attic of old stuff.
	- core.zone.ini							Zone spawn range, no cast, no melee, no mezz, NAMED, charm mobs
	- core.loot.ini							loot list. Leave, Keep, Destroy, Sell
	- blurb.inc									Expansion specific raid announcements. A lazy way to send raid instructions to all in RS.
	- toast.inc									All class toast routines.
	- core.SERVER.CLS.NAME.ini	Character specific INI settings.
	- core.augmentdump.ini			list of all augments by toon.
	
	
	Naming Conventions
	Local/Private Variables: _camelCasing						eg. _loopOutside, _count
	Outer/Global Variables: camelCasing							eg. Nuke1 or healIntervention1
	Running Timers: Timer_Use_For_Timer 						eg. timer_Check_Ammo
	Timer Times: tUse_ForTimer 											eg. tCheck_Ammo
	Functions: name_name_name() 										eg. check_ammo()
	Functions [class specific]: name_SHORTNAME()  	eg. disc_WAR()
	/goto :somethingmeaningful 											eg. :waitforrezbox
	DEFINE: ALLUPPERCASE 														eg. #define DEBUG
	
		
	Common Used Variables:
	AutoBot							bool			automatic or manual Mode
	Target2Kill					int				the ID of the mob that should be the focus of your wanton destruction
	isValidTarget				bool			is ths a valid Target
	timer_???						string		Prefix for running timers. [Timers] in the Toon INI(s) will hold most base set times.
	combat							string		What you are currently doing [MELEE|RANGE|NUKE|HEAL] DUAL is reserved for more then one mode and CC for Chanters/Bards.
	MobAgro							int				range that you will engage a mob at
	_count, _x, _b, _i	int				local loop counts
	_tmpID							int				the passed/local target ID
	tmpHealOverride			int				control hp heal reduction percentage. For zones that impose a HP/Mana cap. (no effect on stamina calculations)
	
	Common Used Functions:
	check_exit										returns {TRUE/FALSE] if there is a reason to not do the current sub
	create_timer									creates a timer. will declare the variable if needed
	core_cast											"SPELLNAME" [alt|disc|gem#|item|0] [MobID|0] [subname]
	check1offBuffs								watches the toon for very specific buffs to respond too for events.
	Event_SetVar									updates the related ini and the loaded variable
		
	Tab spaces set to 2 if you care.
	
	Credits/Inspiration
		- ultraedit v24 wordfile - http://www.macroquest2.com/phpBB3/viewtopic.php?f=46&t=19321&hilit=ultraedit (adapted and updated to current MQ2)
		- NinjaADVLoot - 	is the core of the do_loot loot function used with VERY heavy mods/butchering. http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=19707
		- whoHas.mac [/whohas] - http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=20212 (this is a genius idea)
		- puller/targ acquisition is very loosely based off nytemyst pull code for his SK and the healing foundation
		- i stole the base forage functions from someone years ago. Thank You whomever. fish code based off same processes. and then promptly adapted. rewritten to use the advloot list.
		
***|

#turbo 80
#define DEBUG "/if (${debug}) /echo ${cbad}[\ax${cinfo}${Time.Second}\ax : ${cinfo}${Macro.CurLine}\ax${cbad}]\ax"
#define SDEBUG "/echo ${cbad}[\ax${cinfo}${Time.Second}\ax : ${cinfo}${Macro.CurLine}\ax${cbad}]\ax"
#define LDEBUG " /mqlog [${Me.Class.ShortName}:${Macro.CurLine}]: " 
#define VOUT "/if (${verbose}) /echo ${c-}-\ax"
#define NOUT "/echo ${c-}-\ax"
#define HUDPATH ".\..\MQ2HUD.ini core"
#define MQLOG "/if (${Bool[${mqlog}]}) /mqlog ${Me.CleanName}: "
#define ISDEAD "/if ((${Me.State.Equal[HOVER]} || ${Me.Hovering} || ${Me.Dead}) && ${rezAuto} || ${markerDead}) /call wait_for_rez"
#define CHECKEXIT "/if (${Me.Moving} || ${Me.Stunned} || ${Stick.Active} || ${Me.Invis} || ${Me.State.Equal[FEIGN]}) /goto :exit"
#define CHECKTIE "/if (${SetTie} && !${Bool[${timer_check_Tie}]}) /call set_tie"
#define CHECKREZ "/if (${AutoBot} && !${setPullMode} && !${Me.Invis} && (${Select[${Me.Class.ShortName},CLR,SHM,PAL,DRU]} || ${rezEmergency})) /call check_for_corpse"
#define CHECKSAFELIST "/if (${Bool[${forcesafelist}]} && !${safelist.Find[${_sender}]}) /goto :exit"
#define UPDATEHUD "/call update_HUD_notices"
| #define CLEARCURSOR "/if (${Cursor.ID} && (${AutoBot} && !${Bool[${timer_clear_cursor}]} || ${Bool[${autoInventoryItem.Find[${Cursor.Name}]}]})) /call sort_cursor"
#define CLEARCURSOR "/if (${Cursor.ID}) /call sort_cursor"

#define ECHOCHANNEL "/if (${Bool[${echoChannel}]}) /${echoChannel} "


#include TC\declare.inc
#include TC\info.inc 
#include TC\common.inc
#include TC\MQ2Cast_Spell_Routines.inc
#include TC\hud.inc
#include TC\events.inc
#include TC\test.inc
#include TC\class.ber.inc
#include TC\class.brd.inc
#include TC\class.bst.inc
#include TC\class.clr.inc
#include TC\class.dru.inc
#include TC\class.enc.inc
#include TC\class.mag.inc
| #include TC\class.mon.inc
| #include TC\class.nec.inc
#include TC\class.pal.inc
#include TC\class.rng.inc
#include TC\class.rog.inc
#include TC\class.shd.inc
#include TC\class.shm.inc
#include TC\class.war.inc
#include TC\class.wiz.inc
#include TC\toast.inc

| #include TC\aapurchase.inc
| /call AAInit



|***
 *	DES: Main .. duhh..
 *	USE: 
 *	INI: bunched of 'em
 *  NOTE: 
 ***|
sub main()
	/mqclear
	/call check_versions
 	/declare INICore string outer tc\core.ini
 	/declare INIFile string outer tc\core.${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}.ini
	/call declare_base
	/call check_plugin
	/call echos startup

	/call declare_common
	/call declare_${Me.Class.ShortName}
	/call synergy_core
	| /call fix_INI_Declares
	/call intialize_item_buffs
	/call set_alias
	/call Event_Zone
	/call base_OCD_shit
	| /call AAInit
	ISDEAD

  /call echos help
  /mqlog ---- Starting Core:${versionCore}, ${Me.Class.ShortName}:${version${Me.Class.ShortName}}, INI: core.${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}.ini, 
  /if (${setIgnoreLOS}) NOUT ${ocaution} ${sep} Ignoring Line of Sight.\ax

	NOUT ${cgood}Ready\ax
  
	:loopmain
  	DEBUG ${cbug}:loopmain\ax
	  ISDEAD  
		/if (!${Bool[${timer_check_EQCB}]}) /call check_one_mind
		/varset combat ${If[${AutoBot},${Ini[${INIFile},Common,combat]},FALSE]}
		/varset tmpHealOverride ${If[${HealOverride},${Float[${HealOverride}].Centi},99.99]}
			
	  UPDATEHUD	
	 	/doevents

		/if (!${AutoBot}) {
			/if (${HomeSet}) /makecamp off
		}

		CLEARCURSOR

		| check all buff types, rest and auras
		/if (${AutoBot}) {
			/if (${flagCallNeedRez} && ${Window[ConfirmationDialogBox].Open}) /varset markerDead TRUE
			/call check1offBuffs
			ISDEAD
			/if (${autoRest} && !${setPullMode} || ${autoRest} && ${setPullMode} && !${SpawnCount[npc ${If[${setIgnoreLOS},,los]} radius ${MobAgro} playerstate 4]}) /call do_rest
			/if (!${Me.Invis}) {
				/doevents
				ISDEAD
			  /if (${BuffTell} && ${Bool[${BuffCount}]} && !${timer_check_buffs_tell}) /call check_buffs_tell
				/call check_engaged
				/if (!${Macro.Return} && ${AutoBot}) {
					/if (${BuffItem} && !${timer_check_buffs_item}) /call check_buffs_item
					/if (${BuffSelf} && ${Bool[${SelfBuffCount}]} && !${timer_check_buffs_self}) /call check_buffs_self
				  /if (${BuffRaid} && ${Bool[${BuffCount}]} && !${timer_check_buffs_raid}) /call check_buffs_raid
					/if (${BuffBC} && ${Bool[${BuffCount}]} && !${timer_check_buffs_BC}) /call check_buffs_BC
					/if (${BuffPet} && ${Me.Pet.ID} && !${timer_check_pet_buffs}) /call check_pet_buffs
					/if ((${Bool[${Aura1Spell}]} || ${Bool[${Aura2Spell}]}) && !${timer_check_aura}) /call check_aura
				}
			}
		}

		| check to see if someone needs a doctor?
		/if (${AutoBot} && !${timer_check_cast_cure} && ${switchHealCure}) /call cast_cure

		| fix exp
		/if (${AutoBot} && !${timer_check_EXP} && !${SafeZone}) /call auto_adjust_EXP
		| watch for spawn
		/if (${Bool[${watchSpawn}]} && !${timer_check_watch_spawn}) /call check_watch_spawn
	
		/if (!${Me.Invis} && !${timer_Check_Ammo} && ${Bool[${RangeItemSummon}]}) /call check_ammo

		/if (${AutoBot} && !${timer_Check_Familiar}) /call sort_familiar
		/if (${FamiliarLeave} && ${Me.Pet.Name.Find[familiar]}) /pet get lost
		CHECKTIE

		/if (${setPullMode} && ${HomeSet} && !${SpawnCount[npc targetable radius ${combatRadius}]} && ((${Me.Y} != ${MakeCamp.AnchorY}) && (${Me.X} != ${MakeCamp.AnchorX})) && !${SafeZone}) /makecamp return

		| looter stuffs
		 /if (${AutoBot} || ${setHunterMode}) /call do_loot

		/doevents		
		
		| non normal modes of operation.
		/if (${setDragMode}) /call set_drag_mode
		/if (${setForageMode}) /call do_forage_mode
		/if (${setFishMode}) /call do_fish_mode
		/if (${setPetFarmMode}) /call do_pet_farm_mode
		/if (${setHunterMode} && !${timer_wait_for_mob_to_kill}) /call do_hunt_mob_mode
	
		| use the one off clickies in the Toons INI
		/if (${doclickOdds} && !${timer_check_odds_and_ends}) /call odds_and_ends

		| check constant AA buffs
		/if (${Bool[${AANow1}]} || ${Bool[${AANow2}]}) /call check_AA_now

		| do we pull or assist		
		/if (${AutoBot} && !${Me.Invis} && !${SafeZone}) {
			/if (!${setPullMode}) {
				/call get_assist_target	
			} else /if (${setPullMode} && !${Target2Kill}) {	
				DEBUG get target <= ${MobAgro} = ${SpawnCount[npc ${If[${setIgnoreLOS},,los]} radius ${MobAgro} targetable]}		
				/call get_target
			}
		}

		/call core_${Me.Class.ShortName}
	/goto :loopmain
/return



|***
 *	DES: Settings I like to use. 
 *	USE: /call base_OCD_shit
 *	INI: varries
 *  NOTE: You are free to adjust these. If you do not like, simply comment them out. it will not "hurt" the script.
 ***|
sub base_OCD_shit()
	| reset some of the variables so the toons dont act all stupid.
	/if (!${Bool[${Raid.Members}]}) /call Event_noRaid
	/call Event_SetVar NA SetTie Movement FALSE
	
	| set me some xtargets
 	/if (!${Bool[${Group.Members}]} && !${Bool[${Raid.Members}]}) {
 		 /xtarget set 1 Autohater
 	} else /if (${Bool[${Group.Members}]} && !${Bool[${Raid.Members}]}) {
 		 /xtarget set 1 Groupassisttarget
 	}
	/if (${Bool[${Raid.Members}]}) {
		/xtarget set 1 Raidassist1target
		/xtarget set 2 Autohater
	}
	
	| clear the spawn watch
	/if (${Bool[${watchSpawn}]}) /call Event_SetVar NA watchSpawn Common FALSE
	
	| a little display adjustments. If ur blind, get some glasses.
	/mqfont ${setMQFontSize}
	
	| why the fuck did Verant/SOE/DayBreak ever implement these as a default..??	
	/squelch /assist ${setAutoAssist}
	/squelch /tgb ${setTGB}
	
	| disable the melee plugin and reset combat so you just stand there.
	/if (${Bool[${Plugin[mq2melee]}]}) /melee off
	/if (${Bool[${Plugin[mq2melee]}]}) /squelch /melee reset

	| bard stuffs
	/if (${Bool[${Plugin[mq2twist]}]} && ${Select[${Me.Class.ShortName},BRD]}) /squelch /twist clear
	/if (${Bool[${Plugin[mq2twist]}]} && ${Me.Class.ShortName.Equal[BRD]}) /squelch /twist quiet

	| cpu stuffs
	/if (${Bool[${Plugin[mq2cpuload]}]}) /squelch /cpu auto

	| make sure netbots is running	
	/if (${Bool[${Plugin[mq2netbots]}]}) /squelch /netbots ON send=ON grab=ON	
	
	| turn off forced burn routines if there still on
	/if (${setToastMode}) /call Event_SetVar NA setToastMode Common FALSE

	| turn off rez non guildies/group if it is still on. 'cause fuck everyone else.
	/if (${rezEveryone}) /call Event_SetVar NA rezEveryone Heal FALSE

	| Show the HUD	
	/squelch /hud ${HudType}
	/squelch /loadhud ${HudName}
			
	| Turn off non-normal Modes when starting if they were left on.
	/if (${setDragMode}) /call Event_SetVar NA setDragMode Common FALSE 
	/if (${setForageMode}) /call Event_SetVar NA setForageMode Common FALSE 
	/if (${setFishMode}) /call Event_SetVar NA setFishMode Common FALSE 
	/if (${setSkillsMode}) /call Event_SetVar NA setSkillsMode Common FALSE 
	/if (${setPetFarmMode}) /call Event_SetVar NA setPetFarmMode Common FALSE 
	/if (${setHunterMode}) /call Event_SetVar NA setHunterMode Common FALSE 
	
	
	| KillCode Warning for stupid fucks that like to AFK farm
	/if (${Select[${remoteKillKey},"CHANGE ME",NULL,FALSE,0]}) {
		/mqclear
		NOUT ${sep} Hey.. You!
		NOUT ${owarning} ${sep} FIX: core.ini -> [General] -> RemoteKillKey=${remoteKillKey}
		NOUT ${cbad}GO CHANGE THIS\ax
		/call echos ending
		/if (!${EQBC.Connected}) { 
			/endm
		} else /if (${EQBC.Connected}) {
			/bcaa //endm
		}
	}		
	
	:exit
/return



|***
 *	DES: Designed to check for the one-off crap. NEED TO GET THIS BACK INTO EVENTS....
 *	USE: /call check1offBuffs
 *	INI: 
 *  NOTE: THIS NEEDS TO BE WORKED OUT OF THE CODE..
 ***|
sub check1offBuffs()
	ISDEAD
	| Check for specific buffs that do not use emotes..
	/if (${Me.Buff[Holistic Health].ID}) /call cure_Anashti_DT
	/if (${Me.Buff[Pyroignition].ID}) /call CurePyroignitionDot
	/if (${Me.Buff[Withering Physicality].ID} || ${Me.Buff[Withering Limbs].ID} || ${Me.Buff[Withering Faith].ID}) /call CureDamselofDecay
	:exit
/return




|***
 *	DES:  
 *	USE: 
 *	INI: 
 *  NOTE: work in progress. wrapper for critical errors. I'll get to it some day.
 ***|
sub critical_error()

${Macro.Name}

/return
