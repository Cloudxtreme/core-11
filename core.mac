|***
	core.mac
	Core Macro
	exspes007
	
	"Someone once told me it taks a lot of skill and preperation to be effectively lazy."
	-- unknown
	
	GitHub: https://github.com/exspes007
	GitHub Code: https://github.com/exspes007/core
	GitHub Wiki: https://github.com/exspes007/core/wiki
	
	/invoke ${Macro.Undeclared}
	
	
	Required Plugins:	
	- MQ2Cast
	- MQ2EQBC
	- EQBCS2
	- MQ2Exchange
	- MQ2MoveUtils
	- MQ2Netbots
	- MQ2Debuffs
	
		
	Files:
	- core.mac									You are looking at it
	- core.ini									Script settings that affect all the toons and environment, fishing and foraging results.
	- common.inc								All common use functions.
	- events.inc								Contains responses to EQ generated changes (environment).
	- hud.inc										Sets the hud.
	- declare.inc								99.9% of all variables, class INI creations, forced event, watched commands, alias, binds'.
	- test.inc									empty. testing purposes.
	- class.???.inc							One include for each class [WIZ|NEC|MAG|ENC|WAR|PAL|SHD|BST|BER|BRD|RNG|ROG|CLR|DRU|SHM|MNK]
	- misc stuff.txt						Just helpful info. old code. A forgotten attic of old stuff.
	- core.zone.ini							Zone spawn range, no cast, no melee, no mezz, NAMED, charm mobs
	- core.loot.ini							loot list. Leave, Keep, Destroy, Sell
	- blurb.inc									Expansion specific raid announcements. A lazy way to send raid instructions to all in RS.
	- burn.inc									All class toast routines.
	- mode.inc									All Non-Standard Mode controlls.
	- core.SERVER.CLS.NAME.ini	Character specific INI settings.
	- core.augmentdump.ini			list of all augments by toon.
	
	
	Naming Conventions:
	Local/Private Variables: _camelCasing						eg. _loopOutside, _count
	Outer/Global Variables: camelCasing							eg. Nuke1 or healIntervention1
	Running Timers: Timer_Use_For_Timer 						eg. timer_Check_Ammo
	Timer Times: tUse_ForTimer 											eg. tCheck_Ammo
	Functions: name_name_name() 										eg. check_ammo()
	Functions [class specific]: name_SHORTNAME()  	eg. disc_WAR()
	/goto :somethingmeaningful 											eg. :waitforrezbox
	DEFINE: ALLUPPERCASE 														eg. #define DEBUG
	
		
	Common Used Variables:
	coreAuto							bool			automatic or manual Mode
	Target2Kill					int				the ID of the mob that should be the focus of your wanton destruction
	isValidTarget				bool			is ths a valid Target
	timer_???						string		Prefix for running timers. [Timers] in the Toon INI(s) will hold most base set times.
	combat							string		What you are currently doing [MELEE|RANGE|NUKE|HEAL] DUAL is reserved for more then one mode and CC for Chanters/Bards.
	MobAgro							int				range that you will engage a mob at
	_count, _x, _b, _i	int				local loop counts
	_tmpID							int				the passed/local target ID
	tmpHealOverride			int				control hp heal reduction percentage. For zones that impose a HP/Mana cap. (no effect on stamina calculations)
	
	Common Used Functions:
	check_exit										returns {TRUE/FALSE] if there is a reason to not do the current sub
	create_timer									creates a timer. will declare the variable if needed
	core_cast											"SPELLNAME" [alt|disc|gem#|item|0] [MobID|0] [subname]
	writeINI											updates the related ini and the loaded variable
		
	Tab spaces set to 2 if you care.
	
	Credits/Inspiration
		- ultraedit v24 wordfile - http://www.macroquest2.com/phpBB3/viewtopic.php?f=46&t=19321&hilit=ultraedit (adapted and updated to current MQ2)
		- NinjaADVLoot - 	is the core of the do_loot loot function used with VERY heavy mods/butchering. http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=19707
		- whoHas.mac [/whohas] - http://www.macroquest2.com/phpBB3/viewtopic.php?f=49&t=20212 (this is a genius idea)
		- puller/targ acquisition is very loosely based off nytemyst pull code for his SK and the healing foundation
		- i stole the base forage functions from someone years ago. Thank You whomever. fish code based off same processes. and then promptly adapted. rewritten to use core.loot.ini list.
		
***|

#turbo 60
| #warning
#define DEBUG "/if (${switchDebugCore}) /echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define DEBUGCAST "/if (${switchDebugCasting} || ${switchDebugCore}) /echo [\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax]"
#define DEBUGCLASS "/if (${switchDebugClass} || ${switchDebugCore}) /echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define DEBUGREZ "/if (${switchDebugRez} || ${switchDebugCore}) /echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define DEBUGARRAY "/if (${switchDebugArray} || ${switchDebugCore}) /echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define DEBUGMODE "/if (${switchDebugMode} || ${switchDebugCore}) /echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define SDEBUG "/echo \ar[\ax\aw${Time.Second}\ax : \aw${Macro.CurLine}\ax\ar]\ax"
#define OUT "/echo ${c-}-\ax"
#define VOUT "/if (${verbose}) /echo ${c-}-\ax"
#define NOUT "/echo ${c-}-\ax"
#define HUDPATH ".\..\MQ2HUD.ini core"
#define MQLOG "/if (${Bool[${mqlog}]}) /mqlog ${Me.CleanName}: "
#define AMIDEAD "/if ((${Me.State.Equal[HOVER]} || ${Me.Hovering} || ${Me.Dead}) && ${switchRezTake} || ${markerDead}) /call wait_for_rez"
#define SIMPLEEXIT "/if (${Me.Moving} || ${Me.Stunned} || ${Stick.Active} || ${Me.Invis} || ${Me.State.Equal[FEIGN]}) /return"
#define CHECKEXIT "/if (${check_exit[]}) /return"
#define CHECKTIE "/if (${SetTie} && !${Bool[${timer_check_Tie}]}) /call set_tie"
#define CHECKREZ "/if (${coreAuto} && !${switchPull} && !${Me.Invis} && ${switchRezGive}) /call check_for_corpse"
#define CHECKSAFELIST "/if (!${safelist.Find[${_sender}]} && !${switchOverrideSafelist}) /return"
#define UPDATEHUD "/call update_HUD_notices"
#define CLEARCURSOR "/if ((${switchAutoCursor} && ${Cursor.ID} || ${Bool[${autoInventoryItem.Find[${Cursor.Name}]}]}) && !${timer_auto_cursor_pause}) /call sort_cursor"
#define ECHOCHANNEL "/if (${Bool[${echoChannel}]}) /${echoChannel} "



#include TC\declare.inc
#include TC\common.inc
#include TC\MQ2Cast_Spell_Routines.inc
#include TC\mode.inc
#include TC\events.inc
#include TC\test.inc
#include TC\class.ber.inc
#include TC\class.brd.inc
#include TC\class.bst.inc
#include TC\class.clr.inc
#include TC\class.dru.inc
#include TC\class.enc.inc
#include TC\class.mag.inc
#include TC\class.mnk.inc
#include TC\class.nec.inc
#include TC\class.pal.inc
#include TC\class.rng.inc
#include TC\class.rog.inc
#include TC\class.shd.inc
#include TC\class.shm.inc
#include TC\class.war.inc
#include TC\class.wiz.inc
#include TC\hud.inc


 

|***
 *	DES: Main .. duhh..
 *	USE: 
 *	INI: bunches of 'em
 *  NOTE: 
 ***|
sub main()
	/mqclear
 	/declare INICore 											string 	outer tc\core.ini
 	/declare INIClass 										string 	outer tc\core.${MacroQuest.Server}.${Me.Class.ShortName}.${Me.DisplayName}.ini
	/declare INIZone		     							string 	outer tc\core.zone.ini
	/declare INILoot											string  outer	tc\core.loot.ini
	/declare INIBlurb											string	outer tc\core.blurb.ini
	/declare INIAugDump     							string 	outer tc\core.augmentdump.ini
	/call set_declares
	/call declare_${Me.Class.ShortName}
	/call check_plugin
	/call intialize_item_buffs
	/call set_alias
	/call declare_timers
	/call echos startup 0 0 0 0
	/call Event_Zone
	/call base_preperation


	AMIDEAD

  /if (${Bool[${mqlog}]}) /mqlog ---- Starting Core:${coreBuild}
  /if (${switchOverrideLos}) NOUT ${ocaution} ${sep} Ignoring Line of Sight\ax

	OUT ${cgood}Ready\ax
  
	:loopmain
  	DEBUG ${cbug}:loopmain (Core: ${coreBuild})\ax
	  AMIDEAD
  
		/if (!${timer_check_EQBC}) /call check_one_mind
		
		| what is this for??
		/varset combat ${If[${coreAuto},${Ini[${INIClass},Common,combat]},FALSE]}

		| sort /heal override ##
		/if (${tmpHealOverride} != ${HealOverride}) /varset tmpHealOverride ${If[${HealOverride},${Float[${HealOverride}].Centi},99.99]}
		
		CHECKREZ	
	  UPDATEHUD FALSE	
	 	/doevents
		CLEARCURSOR

		| check all buff types, rest and auras
		/if (${coreAuto}) {
			/if (${HomeSet}) /makecamp off
			/if (${flagCallNeedRez} && ${Window[ConfirmationDialogBox].Open}) /varset markerDead TRUE
			/call check1offBuffs
			AMIDEAD
			/if (${autoRest} && !${switchPull} || ${autoRest} && ${switchPull} && !${SpawnCount[npc ${If[${switchOverrideLos},,los]} radius ${MobAgro} playerstate 4]}) /call do_rest
			/call check_buff_routines
		}

		| check to see if someone needs a doctor?
		/if (${coreAuto} && !${timer_check_cast_cure} && ${switchHealCure}) /call cast_cure
		| fix exp
		/if (${coreAuto} && !${timer_check_EXP} && (!${SafeZone} || !${switchOverrideSafezone})) /call auto_adjust_EXP
		| watch for spawn
		/if (${Bool[${watchSpawn}]} && !${timer_check_watch_spawn}) /call check_watch_spawn
		| guns need ammo
		/if (!${Bool[${FindItemCount[${RangeItemSummon}]}]} && ${Bool[${RangeItemSummon}]}) /call check_ammo
		| fix ur pet!
		/if (${coreAuto} && !${timer_Check_Familiar}) /call sort_familiar
		/if (${sumFamiliarLeave} && ${Me.Pet.Name.Find[familiar]}) /pet get lost
		| food/drink
		/if (${coreAuto} && ${Bool[${clickFoodDispenser}]} && !${timer_click_food}) /call click_summon_food
		/if (${coreAuto} && ${Bool[${clickDrinkDispenser}]} && !${timer_click_drink}) /call click_summon_drink
		
		CHECKTIE
		| sort out return to camp
		/if (${coreAuto} && ${HomeSet} && !${SpawnCount[npc radius ${combatRadius} playerstate 4 targetable]} && ((${Me.Y} != ${MakeCamp.AnchorY}) && (${Me.X} != ${MakeCamp.AnchorX})) && (!${SafeZone} || ${switchOverrideSafezone})) /makecamp return

		| looter stuffs
		 /if ((${coreAuto} || ${switchOverrideLoot}) && (!${SafeZone} || ${switchOverrideSafezone})) /call do_loot

		/doevents		
		
		| non normal modes of operation
		/call do_mode
	
		| use the one off clickies in the Toons INI
		/if (${doclickOdds} && !${timer_check_odds_and_ends}) /call odds_and_ends

		| check constant AA buffs
		/if (${coreAuto} && (${Bool[${AANow1}]} || ${Bool[${AANow2}]})) /call check_AA_now
		| check constant Disc buffs
		/if (${coreAuto} && (${Bool[${DiscNow1}]} || ${Bool[${DiscNow2}]})) /call check_Disc_now

		| do we pull or assist		
		/if (${coreAuto} && !${Me.Invis} && (!${SafeZone} || ${switchOverrideSafezone})) {
			/if (!${switchPull}) {
				/call get_assist_target	
			} else /if (${switchPull} && !${Target2Kill}) {	
				DEBUG get target <= ${MobAgro} = ${SpawnCount[npc ${If[${switchOverrideLos},,los]} radius ${MobAgro} targetable]}		
				/call get_target
			}
		}

		/call core_${Me.Class.ShortName}
	/goto :loopmain
/return



|***
 *	DES: Settings I like to use. 
 *	USE: /call base_preperation
 *	INI: varries
 *  NOTE: You are free to adjust these. If you do not like, simply comment them out. it will not "hurt" the script.
 ***|
sub base_preperation()
	| reset some of the variables so the toons dont act all stupid.
	/if (!${Bool[${Raid.Members}]}) /call Event_noRaid
	| /call Event_SetVar NA SetTie Movement FALSE
	
	| set me some xtargets
 	/if (!${Bool[${Group.Members}]} && !${Bool[${Raid.Members}]}) {
 		 /xtarget set 1 Autohater
 	} else /if (${Bool[${Group.Members}]} && !${Bool[${Raid.Members}]}) {
 		 /xtarget set 1 Groupassisttarget
 	}
	/if (${Bool[${Raid.Members}]}) {
		/xtarget set 1 Raidassist1target
		/xtarget set 2 Autohater
	}
	
	| clear the spawn watch
	/if (${Bool[${watchSpawn}]}) /call writeINI watchSpawn Common FALSE
	
	| a little display adjustments. If ur blind, get some glasses.
	/mqfont ${setMQFontSize}
	
	| why the fuck did Verant/SOE/DayBreak ever implement these as a default..??	
	/squelch /assist ${setAutoAssist}
	/squelch /tgb ${setTGB}
	
	| disable the melee plugin and reset combat so you just stand there.
	/if (${Bool[${Plugin[mq2melee]}]}) /melee off
	/if (${Bool[${Plugin[mq2melee]}]}) /squelch /melee reset

	| bard stuffs
	/if (${Bool[${Plugin[mq2twist]}]} && ${Select[${Me.Class.ShortName},BRD]}) /squelch /twist clear
	/if (${Bool[${Plugin[mq2twist]}]} && ${Select[${Me.Class.ShortName},BRD]}) /squelch /twist quiet

	| cpu stuffs
	/if (${Bool[${Plugin[mq2cpuload]}]}) /squelch /cpu auto

	| make sure netbots is running	
	/if (${Bool[${Plugin[mq2netbots]}]}) /squelch /netbots ON send=ON grab=ON	
	
	| turn off forced burn routines if there still on
	| /if (${Bool[${burnForce}]}) /varset burnForce FALSE

	| turn off rez non guildies/group if it is still on. 'cause fuck everyone else.
	/if (${switchRezEveryone}) /call writeINI switchRezEveryone Heal FALSE

	| Show the HUD	
	/squelch /hud ${HudType}
	/squelch /loadhud ${HudName}
			
		
	| KillCode Warning for stupid fucks that like to AFK farm
	/if (${Select[${remoteKillKey},"CHANGE ME",NULL,FALSE,0]}) {
		| /mqclear
		OUT ${sep} Hey.. You!
		OUT ${owarning} ${sep} FIX: \aw/core killcode=\ax${remoteKillKey}
		OUT ${cbad}CHANGE THIS\ax
	}		
	
		
	| auto melee skills
	| /if (${Bool[${kick}]} && !${Skill[Kick].Auto}) /autoskill kick
	| /if (${Bool[${bash}]} && !${Skill[Bash].Auto}) /autoskill bash
	| /if (${Bool[${frenzy}]} && !${Skill[Frenzy].Auto}) /autoskill frenzy
	| /if (${Bool[${backstab}]} && !${Skill[Backstab].Auto}) /autoskill backstab
	| /if (${Bool[${dragonpunch}]} && !${Skill[dragon punch].Auto}) /autoskill dragon punch
	| /if (${Bool[${eaglestrike}]} && !${Skill[eagle strike].Auto}) /autoskill eagle strike
	| /if (${Bool[${tigerclaw}]} && !${Skill[tiger claw].Auto}) /autoskill tiger claw
	| /if (${Bool[${flyingkick}]} && !${Skill[flying kick].Auto}) /autoskill flying kick
	| /if (${Bool[${roundkick}]} && !${Skill[round kick].Auto}) /autoskill round kick
	
/return